
Day 1 : 28-02-20

	Java Technologies 

what is Java and why java?

Java is platform independent and pure object oriented programming language. 

Pascal 
Cobol 
Fortan 
C

#include<stdio.h>

function mno() {
	
}
function xyz() {
	mno();
}
function abc(int x, int y) {

	xyz();	
}
void main() {
	abc(10,20);

	abc();
}


C + OOPs = C++

OOPs : Object Oriented Programming system 

object : any real world entity 

	Properties or state 	have 		fields/variables int/float/char/string/double 
Person 
	behaviour 		do/does 	functions/methods  sleep(), taking(), coming(), walking() 
Place 
Bank 
Animal
Car 

etc 


class : blue print of object or template of object. 

C+ OOPs = C++


Java developed in Nov 1995, The initial name of the java is Oak. 
It was belong to Sun Microsystem now part of Oracle. 
James gosling 

Features of the Java 
1. Simple : Pointer,(JVM), Datastructure (Collection Framework), Structure. 
Operator Overloading, Virtual, Friend, Memory management. 
2. Java is pure object oriented programming language. 
3. Platform independent programming language.(Byte code)
4. Compiler and Interpreter 

syntax of class 

class className {		
	fields;
	methods;
}

Abc 
Demo
abc
test 

class naming rules 
It follow camel naming rules 
1. if class contains one word, first letter of class must be upper case. 
2. If class contains more then one word, then each word first letter upper case. 

Demo
Employee
Manager 
EmployeeInfo
ManagerDetails 

notepad, 	eclipse 


Welcome Program 

class Demo {
	
	public static void main(String args[]) {
		System.out.println("Welcome to Java.....");
	}
}

javac Demo.java 		-- to compile 

java Demo			-- to run 

Data Types : Data type is a type of data which tells what type of data it can hold. 

2 types 

1. primitive data types : it is use to store only value 
	8 type 
	a. byte 	1
	b. short 	2
	c. int 		4
	d. long 	8	without decimal 
			
	e. float 	4
	f. double	8	with decimal 
 
	g. char 	2	any single character 
	i. boolean 	1bit	true/false 
2. non primitive data type or reference data type : it is use to store 
	value as well as reference of another data type 

	4 types 
	a. array 
	b. class - predefined or userdefined 
	c. interface - predefined or userdefined 
	d. enum 


Data Types 

class Demo {
	
	public static void main(String args[]) {
	int a=10;
	char c='%';
	boolean res = true;

	System.out.println(a);
	System.out.println(c);
	System.out.println(res);
	System.out.println("The value of a is "+a);
	System.out.println(10+20);
	System.out.println("10"+20);	
	System.out.println(10+"20");
	}
}

type casting : converting one data type to another data. 
1. implicit 
2. explicit 

		------------------->implicit -------------------->

		byte		short		int 		long 


		<-----------------explicit ---------------------------


Type casting example 

class Demo {
	
	public static void main(String args[]) {
	byte a=10;
	short b=a;
	System.out.println(a);
	System.out.println(b);

	short c =10;
	byte d =(byte)c;	// 	(type)variableName
	System.out.println(c);
	System.out.println(d);	
	}
}

	int ---float -----> implicit 

	float ---int -----explicit 

Operator 
If statement 
	simple if 
	if else 
		nested if 
	if ladder or if else if 
		switch 
looping 
		while loop 	
	do while loop 
		for loop 
	
	for each loop or enhanced loop 

Simple if 

class Demo {
	
	public static void main(String args[]) {
	System.out.println("Hello");
	int a=10;
	int b=5;	
		if(a>b) {
			System.out.println("Yes");
		}
	System.out.println("Finish");
	}
}

If else if 

class Demo {
	
	public static void main(String args[]) {
	System.out.println("Hello");
	int a=10;
	int b=50;	
		if(a>b) {
			System.out.println("Yes");
		}else {
			System.out.println("No");
		}
	System.out.println("Finish");
	}
}


nested if 

class Demo {
	
	public static void main(String args[]) {
	System.out.println("Hello");
	int a=1;
	int b=2;
	int c=3;	
		if(a>b) {
			if(a>c) {
				System.out.println("a is largest");
			}else {
				System.out.println("c is largest");
			}
		}else {
			if(b>c) {
				System.out.println("b is largest");
			}else {
				System.out.println("c is largest");
			}		
		}
	
	}
}

if else if 

class Demo {
	
	public static void main(String args[]) {
	int avg =92;
	if(avg>90){
		System.out.println("A+");
	}else if(avg>80){
		System.out.println("A");
	}else if(avg>70){
		System.out.println("B");
	}else {
		System.out.println("C");
	}
	}
}

switch statement 

	switch(varibleName) {	variable must be type of int, char, string 
	case value:block1;
		break;
	case value:block2;
		break;
	case value:block3;
		break;
	default:wrongblock;
		break;
	}

	switch, case, break and default are keywords. 

	switch statement example 

	class Demo {
	
	public static void main(String args[]) {
	int ch=8;
		switch(ch) {
		case 1:System.out.println("block1");
			break;
		case 2:System.out.println("block2");
			break;
		case 3:System.out.println("block3");
			break;
		default:System.out.println("wrong choice");
		}
		System.out.println("Finish");
	}
}

looping :
	
	initialization 
		condition 
	increment/decrement 

	while loop

	class Demo {
	
	public static void main(String args[]) {
	int i=1,n=10;

		while(i<=n) {

			System.out.println(i);

			i++;
		}

		System.out.println("Finish");
	}
}



	do while loop 

class Demo {
	
	public static void main(String args[]) {
	int i=1,n=10;

		do {

			System.out.println(i);

			i++;
		}while(i>=n);

		System.out.println("Finish");
	}
}

for loop 

class Demo {
	
	public static void main(String args[]) {
	
	for(int i=0;i<=10;i++) {
		System.out.println(i);
	}
	}
}

array : it is collection of same type of value. 

	syntax 

	dataType arrayName[];

	int abc[];		in Java 

	int abc[10];		in C/C++

	int []xyz;

	for each loop 

	syntax 

	for(dataType variablename:arrayName) {

	}
	
 
OOPs using Java 

object : object is a any real world entity. 
class : blue print of object or template of object. 

class Car {
	int wheel;
	float price;
	String color;
	void start() {
	System.out.println("Car Start");
	}
	void appliedGear() {

	}
	void moving() {

	}
	void stop() {
	System.out.println("Car Stop");
	}
}
class CarTest {
	public static void main(String args[]){
	//start();	
	// className objectReferenceName = new ClassName();

	Car santro = new Car();
	santro.start();
	santro.stop();
	}
}

Types of variable / fields 

3 types 
1. instance variable 
	a. The variable which declare inside a class but outside a method is known as 
		instance variable. 
	b. The instance variable hold deffault value according to their data types. 
		int family --0
		float family --0.0
		char --space 
		boolean - false 
		String -- null
	c. Instance variable we can access directly within a method but method must be part of same 
	class as well as it must be non static method.
	
2. local variable 
	a. The variable which declare inside a method including main method is known as local 
	variable. 
	b. local variable doesn't hold default value. we have to initilize. 
	c. the scope of the variable within that block where it declare. 
3. static variable 


instance variable and local variable 

class Car {
	int wheel;
	float price;
	String color;
	void carInfo() {
		int temp=100;
		System.out.println("Car Info");
		System.out.println("Wheel "+wheel);
		System.out.println("price "+price);
		System.out.println("color "+color);
		System.out.println("Temp is "+temp);
	}	
}
class CarTest {
	public static void main(String args[]){
	Car santro = new Car();
	santro.carInfo();
	}
}

Assign the value for instance variable 

class Car {
	int wheel;
	float price;
	String color;
	void carInfo() {
		int temp=100;
		System.out.println("Car Info");
		System.out.println("Wheel "+wheel);
		System.out.println("price "+price);
		System.out.println("color "+color);
		System.out.println("Temp is "+temp);
	}	
}
class CarTest {
	public static void main(String args[]){
	Car santro = new Car();
	santro.wheel = 4;
	santro.color = "White";
	santro.price = 850000;
	santro.carInfo();
	}
}

Creating more the one objects 

class Car {
	int wheel;
	float price;
	String color;
	void carInfo(String name) {
		System.out.println("Car Info "+name);
		System.out.println("Wheel "+wheel);
		System.out.println("price "+price);
		System.out.println("color "+color);
	}	
}
class CarTest {
	public static void main(String args[]){
	Car santro = new Car();
	santro.wheel = 4;
	santro.color = "White";
	santro.price = 850000;
	santro.carInfo("Santro");

	Car innova = new Car();
	innova.wheel =4;
	innova.color ="Gray";
	innova.price = 1400000;
	innova.carInfo("Innova");
	}
}



Constructor : It is a type of special method which help to create the object. 
Pts 
1. Constructor have same as class itself.
2. Constructor doens't contains return type not even void also. 
3. constructor no need call it will call automatically when we create the objects. 


constructor example 

class Car {
	Car() {
		System.out.println("Object created....");
	}
	void carInfo() {
		System.out.println("Car Info method");	
	}	
}
class CarTest {
	public static void main(String args[]){
	Car santro = new Car();	
	santro.carInfo();	
	}
}


Day 2 : 31-08-20


In the life of the object if you want to perform only one time any task. that type of task 
we have to write inside a constructor but if you want to perform more than one time that type 
of task we have to write inside a methods. 

Parameterized constructor. 

class Employee {
	String name;
	float salary;
	Employee() {
		name ="Unknown";
		salary = 8000;
	}
	Employee(String name, float salary) {
		//name = name;		//localVariable = localVariable, hide the visibility of instance 
		this.salary = salary;
		this.name = name;	//this is keyword when local and instance have same name 
					//to refer to instance variable we have to use this
	}
	void setSalary(float salary) {
		this.salary = salary;
	}
	void display() {
		System.out.println("name is "+name);
		System.out.println("salary is "+salary);
	}
}
class DemoTest {
	public static void main(String args[]) {
	Employee emp1 = new Employee();
	emp1.display();	
	Employee emp2 = new Employee();
	emp2.display();	
	Employee emp3 = new Employee("Ravi",12000);
	emp3.display();	
	Employee emp4 = new Employee("Mahesh",14000);
	emp4.setSalary(16000);
	emp4.display();	
	}
}	


Encapsulation : Binding or wrapper data(variable) and code(function/methods) in a single units. 

class 

Example 

class Employee {
	private String name;
	private float salary;
	void setInfo(String name, float salary) {
		this.name = name;
		//this.salary = salary;
		if(salary<0) {
			this.salary = 8000;
		}else {
			this.salary = salary;
		}
	}
	void display() {
		System.out.println("name is "+name);
		System.out.println("salary is "+salary);
	}
}
class DemoTest {
	public static void main(String args[]) {
	Employee emp1 = new Employee();
	//emp1.name = "Ravi";
	//emp1.salary = -12000;
	emp1.setInfo("Ravi",-12000);
	emp1.display();	
	}
}	


JavaBean Vs Normal Java Class 

class Employee {
	int id;
	String name;
}

JavaBean class 


public class Employee {
	private int id;
	private String name;
	//setter and getter methods 

	public void setId(int id) {
		this.id = id ;		//with condition set
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getName() {
		return name;
	}
	public int getId() {
		return id;
	}
}		
						JavaBean class. 

Pure Encapsulation class. 



Inheritance : Inheritance is use to inherits or acquire the properties and behaviour of old class 
to new class. 

class OldClass {		super class, base class or parent class. 
	properites 
	behaviour 
}


class NewClass extends OldClass{	sub class, derived class or child class. 
	properites 
	behaviour 
}



Simple Example 

class A {
	void dis1() {
		System.out.println("A class method");
	}
}
class B extends A{
	void dis2() {
		System.out.println("B class method");
	}
}
class DemoTest {
	public static void main(String args[]) {
	A obj1 = new A();
	obj1.dis1();

	B obj2 = new B();
	obj2.dis2();
	obj2.dis1();	
	}
}	

Types of Inheritance 

1. Single Inheritance : One super class and One sub class 

class A {		}
class B extends A {	}

2. Multilevel Inheritance : One super class and n number of sub class connected one by one 

class A {		}
class B extends A {	}
class C extends B {	}
class D extends C {	}

3. Hierarchical Inheritance : One super class and n number of sub class connected directly to super clss
class A {		}
class B extends A {	}
class C extends A {	}

4. Multiple Inheritance : More than one super class and one sub class 

class A {	}
class B {	}
class C extends A, B {	}	But java doesn't support this type of inheritance 

This type of inheritance in java we can achieve indirectly using interface. 


OOPs Relationship 


	1. 		Manager/Programmer is a Employee  
	2. 		Employee has a Address  

class Employee {	
	int id;
	String name;
	float salary 			//simple property 
	Address add;	//complex property 
	Employee() {
		this.add = new Address();
	}
		read() {}
		calsalary() {}
		display() {}
}
class Manager extends Employee{	
	numberOfEmp;
}
class Programmer extends Employee{	
	projectName;
}
class Address{
	city,state, pinCode;
}


Inheritance Example 

class Bike {
	void speed() {
		System.out.println("60km/hr");
	}
}
class Pulsar extends Bike {
	void color() {
		System.out.println("Black");
	}
}
class HeroHonda extends Bike {
	void color() {
		System.out.println("Gray");
	}
}
class DemoTest {
	public static void main(String args[]) {
	HeroHonda hh = new HeroHonda();
	Pulsar pu = new Pulsar();
	hh.color();	hh.speed();
	pu.color();	pu.speed();	
	}
}	

Polymorphism : One name many forms or many implementation 

				Java 

	Compile	time 				run time 

	static binding 				dynamic binding 

	early binding 				late binding 

Compile time : 
	Method Overloading : The method have same name as well as same return type 
	but different parameter list(type of parameter list or number of parameter list).

	
class Operation {
	void add(int x, int y) {
		System.out.println(x+y);
	}	
	void add(int x, int y, int z) {
		System.out.println(x+y+z);
	}
	void add(float x, float y) {
		System.out.println(x+y);
	}
	void add(String x, String y) {
		System.out.println(x+y);
	}
}
class DemoTest {
	public static void main(String args[]) {
	Operation op = new Operation();
	op.add(1,2);
	op.add("1","2");
	op.add(1,2,3);
	op.add(10.10f,20.20f);	
	}
}	

Method Overriding : The method have same name and same method signature(number of parameter list, 
type of parameter list as well as return type must be same).

To achieve the method overriding class must be follow inheritance. 



class Bike {
	void speed() {
		System.out.println("60km/hr");
	}
}
class Pulsar extends Bike {
	void color() {
		System.out.println("Black");
	}
	void speed() {
		System.out.println("90km/hr");		//overriding the speed() methdo 
	}
}
class HeroHonda extends Bike {		//re-usability of speed() method 
	void color() {
		System.out.println("Gray");
	}
}
class Tvs extends Bike {
	void color() {
		System.out.println("White");
	}
	void speed() {
		super.speed();			//merge the both speed() method as one method 
		System.out.println("20km/hr");
	}
}
class DemoTest {
	public static void main(String args[]) {
	HeroHonda hh = new HeroHonda();
	Pulsar pu = new Pulsar();
	Tvs tv = new Tvs();
	hh.color();	hh.speed();
	pu.color();	pu.speed();	
	tv.color();	tv.speed();
	}
}	


abstract keyword:
1. abstract is a keyword we can use with method and class but not with variable. 
2. abstract method : The method without body without curly brackes or incomplete methods is 
known as abstract method. 

	abstract returnType methodName(parameterList);

	abstract void speed();
3. if class contains abstract method we have to declare the class as a abstract. 

	syntax 

	abstract class className {

	}
4. whichever class extends abstract class that class must be provide the body for all abstract methods 
belong to that class mandatory. That class can ignore only if that class itself is a abstract class. 
5. abstract class we can't create the object. 
6. abstract class can contains zero or 1 or all abstract methods. 
example 

abstract class Bike {
	abstract void speed();
}
 class Pulsar extends Bike {
	void color() {
		System.out.println("Black");
	}
	public void speed() {
		System.out.println("90km/hr");
	}
}
class DemoTest {
	public static void main(String args[]) {
	Pulsar pu = new Pulsar();
	pu.speed();
	}
}	

final keyword :
1. final is a keyword we can use with variable, method and class. 
2. final variable : to declare the constant we use final keyword with variable. 
3. final method : if method is final we can't override that method. 
4. final class : if class is a final we can't extends that class. 

final class Bike {
	final void speed(){
		System.out.println("60km/hr");
	}
}
 class Pulsar extends Bike {
	void color() {
		System.out.println("Black");
	}
	/*public void speed() {
		System.out.println("90km/hr");
	}*/
}

class DemoTest {
	public static void main(String args[]) {
	Pulsar pu = new Pulsar();
	pu.speed();
	final int A=10;
	System.out.println(A);
	//A=20;
	}
}	

static : 
1. static is a keyword we can use with variable and method but not with class(
inner class, if class is inner class we can use static but not outer class). 

2. If variable is static, we can assign the value for that variable with the help 
className as well as object. 

3. If class is static, we can call that class with the help of className as well as 
object name. 

4. within a static method we can access only static variable directly but inside non static method 
we can access static as well as not static variable directly of same class. 
class Abc {
	int a;
	static int b;
	void dis1() {
		System.out.println("Non static method");
		System.out.println(a);
		System.out.println(b);
	}
	static void dis2() {
		System.out.println("Static method");
		//System.out.println(a);
		System.out.println(b);
	}
}
class DemoTest {
	public static void main(String args[]) {
	Abc obj1 = new Abc();
	obj1.a=10;
	Abc.b=20;
	obj1.b=30;
	
	obj1.dis1();
	Abc.dis2();
	obj1.dis2();	
	}
}	 


static use 

class Abc {
	int a;
	static int b;
	
	void dis1() {
		System.out.println("a = "+a);
		System.out.println("b = "+b);
	}	
	static void dis2() {
		Abc obj = new Abc();
		System.out.println(obj.a);
	}
	
}
class DemoTest {
	public static void main(String args[]) {
	Abc obj1 = new Abc();
	Abc obj2 = new Abc();
	
		obj1.a=10;			//a=10
	obj1.b=20;			//b=20
	Abc.b=30;			//b=30

		obj2.a=40;			//a=40
	obj2.b=50;			//b=50
	Abc.b=60;			//b=60	
	obj1.dis1();	//a=10	, b=	60
	obj2.dis1();	//a=40	, b=	60	
	}
}	


interface : interface is known as 100% pure abstract class upto java 7. 

interface contains only final variable (constant) and abstract methods. 

syntax 

	interface interfaceName {
		fields;
		methods;
	}

	By default all fields are public, static and final 
	by default all methods are public and abstract. 
	For interface default access specifiers 
	
	interface Abc {
		int A=10;
		void dis1();
	}

	interface Xyz {
		int B=20;
		void dis2();
	}

	interface Mno extends Abc,Xyz {
		int C=30;
		void dis3();
	}
	class Demo implements Abc, Xyz {

	}
	
	like one interface can extends another interface. But interface can extends more than one 
	interface but class can extends only one class. 

	class to class : extends only one 
	interface to interface : extends more than one 
	class to interfae implements more than one 
	interface to class : can't extends or implements. 

		
	Method Overriding rules for access specifiers 

	Super 				Sub 

	public 				public 

	protected 			public 
					protected 

	default(noting)			public 
					protected 
					default(nothing)

	private 			can't override 

		
Interface example 

interface Abc {
	int A=10;
	void dis1();
}
interface Xyz {
	int B=20;
	void dis2();
}
interface Mno extends Abc,Xyz {
	int C=30;
	void dis3();
}
class Demo implements Abc, Xyz {
	public void dis1() {
		System.out.println("Abc interface method");
	}
	public void dis2() {
		System.out.println("Xyz interface method");
	}
}
class DemoTest {
	public static void main(String args[]) {
	Demo obj1 = new Demo();
	obj1.dis1();
	obj1.dis2();	
	}
}	


Day 3 : 01-09-20

super and this keywords. 

class A {
	int a=10;
}
class B extends A {
	int a=20;
	void dis1() {
		int a=30;
		System.out.println("a="+a);
		System.out.println("this a="+this.a);
		System.out.println("super a="+super.a);
		
	}
}
class DemoTest {
	public static void main(String args[]) {
	B obj1 = new B();
	obj1.dis1();	
	}
}	


this() and super() : 

this() : this() is use to call same class constructor like constructor chaining. 
	It must be inside a constructor and first statement inside a constructor. 

class Employee {
	Employee() {
	this(100);	//calling parameterized constructor - int 
		System.out.println("Employee()");
	
	}
	Employee(int x) {
	this(1,"Ravi");
		System.out.println("Employee(int)");
	}
	Employee(int x, String y) {
		System.out.println("Employee(int,string)");
	}
}
class DemoTest {
	public static void main(String args[]) {
	Employee emp1 = new Employee();	
	}
}	

super() : super() is use to call sub class constructor to super class constructor. 
	By default every sub class constructor contains super() which help to call super class constructor.
	super() must be first statement inside a constructor. 

class Employee {
	Employee() {
		System.out.println("Employee()");
	}
	Employee(String name) {
		System.out.println("Employee(string)");
	}	
}
class Manager extends Employee {
	Manager() {
		super("Ravi");
		System.out.println("Manager()");
		
	}
}
class DemoTest {
	public static void main(String args[]) {
	Manager mgr = new Manager();
	}
}	


using super() and this() example 

class Employee {
	Employee() {
		System.out.println("Employee()");
	}
	Employee(String name) {
		this();
		System.out.println("Employee(string)");
	}	
}
class Manager extends Employee {
	Manager() {
		super("Ravi");
		System.out.println("Manager()");
		
	}
}
class DemoTest {
	public static void main(String args[]) {
	Manager mgr = new Manager();
	}
}	


object creation using Runtime polymorphism 

creating object of sub class and super class reference (super class may be 
normal java class or abstract class or interface).


super class object and sub class reference not possible. 

class Employee {
	void dis1() {
		System.out.println("Employee dis1() method");
	}	
}
class Manager extends Employee {
	void dis1() {
		System.out.println("dis1() method - Override by Manager");
	}	
	void dis2() {
		System.out.println("Manager dis2() method");
	}
}
class DemoTest {
	public static void main(String args[]) {
	Employee emp1 = new Employee();
	emp1.dis1();
	
	Manager mgr1 = new Manager();
	mgr1.dis1();	
	mgr1.dis2();
	
	Employee emp2 = new Manager();  // Runtime polymorphism 
	emp2.dis1();	// using this reference we can call only those methods which 
			//belong to super class or only overrided methods	
	//emp2.dis2();
	}
}	



packages : package is a collection of classes and interfaces. 

2 types 

1. user-defined package 
2. pre-defined package or built-in package. 


				eduction 

		school				college 

		Attendance 			Attedance 

		syntax 

		package packagename;

package com;
class DemoTest {
	public static void main(String args[]) {
	System.out.println("Welcome to User-defined package");	
	}
}	


compile the program using command as 

javac className.java 

After compilation create the directoy with packageName 
and copy/paste .classfile 

then to run the application 

java packageName.class 

eclipse IDE 


	Access specifiers : 

	private : private we can use with instance variable, static variable, non static method 
		static method, constructor but not with local variable and class. 
	scope : within in a same class. 
	
	default(nothing) : we can use with all. 
	scope : within in a same package. 
		
	protected :protected we can use with instance variable, static variable, non static method 
		static method, constructor but not with local variable and class.
	scope : within in a same package other package if it is a sub class. 
	
	public :public we can use with instance variable, static variable, non static method 
		static method, constructor as well as class but not with local variable.
	scope : same package as well as other package. 




	pre-defined package 

	java					javax (extendiable)----> Root packages. 

	lang					swing  
	io 					sql 
	util 					rmi 
	awt 					net
	sql 					servlet 
	net 					jms 
	rmi 					ejb 


	etc 					etc 

	By default every java program imported lang package. 

	By default every java program extends Object class. 

	String : Combination of one or more than one character enclosed in double quote. 
		In Java String is pre-defined class part of lang package. 
	syntax 

	String str1 = "Welcome to Java training";
	String str2 = new String("Welcome to Java Training");

	String is known as immutable class. 
	Immutable means we can't change. 

		
	StringBuffer 
	StringBuilder 

	Both are mutable string class. 

	StringBuffer by default all methods are synchronized. Because of this performance wise slow. 

	synchronized only one thread can execute that code. 

	
		Exception Handling 

		Exception : Exception is a object which occurs when unexpected or abnormal conditions 
		during the execution of a program. 

		Using some technique we have to handle the exception. 

					java 	

		compile program 				run program 

		compile time error 				run time error 

		syntax error 
		or 						  error 
		typo error 	
							Error 			Exception 

		Error and Exception both are pre-defined classes part of lang package. 

		Error : It is a type of run which generate at the run time
		 which we can't handle it. 
		ex : JVM crash, software or hardware issue. 

		Exception : It is a type of run which generate at the run time
		which we can handle it. 
		ex : Divided by Zero.

					Object 

					Throwable 

			Error 				Exception 

						
					checkedException 		unchecked exception 
					(type of exception)

					SQLException 			RuntimeException 
					IOException 
					InterruptedException 		ArithmeticException 
								ArrayIndexOutOfBoundsException 
								NumberFormatException 
								NullPointerException 			
					etc 			etc

			all unchekced exception are sub class of RuntimeException. 

			But all checked exception directly or indirectly extends Exception. 

			to handle both checked as well as unchecked exception java provided 
			5 keywords 

		1. try 
		2. catch 
		3. finally 
		4. throw 
		5. throws 

		try - catch block 

		try {

		}catch(Exception e) {

		}

		try with single catch : In type of exception command task or solution. 

		try with multiple catch --> Depending upon the exception specific task or solution. 

		try : the code 1 line or multi generate exception, we have to keep in try block 

		catch : this block execute only if any exception generate. 

		finally : This block execute 100% sure if any exeption generate or not generate. 

		
		try -- catch 

		try -- multiple catch 

		try --catch --finally 

		try --multiple catch --finally 

			try --finally 

		finally block is use to close the resources like database or file handling 

		
		throw : this keyword is use to raise or generate pre-defined or user-defined exception 
		depending upon the conditions. 

		syntax 

		throw new Exception();

		or 

		throw new ExceptionSubClass();


		throws : this keyword is use to throw exception to caller methods. 

		syntax 

		returnType methodName(parametterList) throws Exception {

		}

		void display() throws Exception,ExceptionSubClass {

		}

		checkedexception 

		if code throw checked exception we can't compile the program without 
		exception handling. 

		checked exception check twice compile time as well as run time. 

		
		Day 5 03/09/20

	
	int a;

	a=10

	a=20;

	array :

	int abc[];

	class Employee {
		int id;
		String name;
		float salary;
	}	

	Employee emp = new Employee();
	emp.id =100;
	emp.name = "ravi";
	emp.salary = 12000;


	array object :

	syntax 

	className objectName[]=new className[size];

	Employee emps[]=new Employee[100];

	zero object of Employee class	
	array is one type of reference data type so array object created. 

	emps[0]=new Employee();
	emps[1]=new Employee();
	emps[0].id=100;
	emps[1].id=101;
	emps[99]=new Employee();		
	
	Collection Framework : Collection framework contains set of classes and interfaces 
	which help to store collection of object or elements of any types like int, float 
	string or user-defined class object. 

	As well as provided set of methods which help add elements dynamically, remove, search, 
	iteratre very easily. 

				
	Collection framework is part of util package. It is like a data structure in Java. 
	
	
			Collection ----> interface 


	List		Set		Queue 			Map ---> interfaces 

	List, Set and Queue internally extends Collection but Map doesn't extends Collection. 

	List : It allow duplicate elements. It maintains the order using index position. 

	Set : It doesn't allow duplicate elements. Some clases under set maintains order, unorder 
		and sorted by default ascending. 

	Queue : First In First Out .

	Map : It allow to store information in the form of key-value pairs. 
	Where key is unique and value may be duplicate. 
	some classes under map maintains order, unorder and sorted by default. 

	List : Below classes comes under the List 
		Theses are classes directly or indirectly implements List interface 
		ArrayList 
		Normal array allow to store same type of values. 
		But ArrayList can store any type of values. 
		Normal array we have create the memory size. 
		But ArrayList memory size increase dynamically.
		In between adding or removing in normal array very difficutl. 
		But In ArrayList we can do very easily. 
		
		LinkedList :
			In Java by default LinkedList is consider as double linked list. 
			Node :

				1st part	2nd part		3rd part 

			  null<-----             value                   ------> next node. 
			If we adding or removing elements again and again then LinkedList is good option. 
			If we retreive the elements again and again ArrayList is good option. 

			
		Vector : Vector is legacy class(old) class. by default all methods are synchronized. 
			Work is safe but slow in performance. 
			
		Stack : First in Last Out. 
		
	
	Set : Below clases comes under the Set 
		These are classes directly or indirectly implements Set interfaces 
		Doesn't allow duplicate 
		HashSet	:		unorder 
		LinkedHashSet	:	order 
		TreeSet 	:	sorted by default asc. In TreeSet we have to store same type value. 
		
	Queue : FIFO
		PriorityQueue
			: It retrieve the records base upon the priority(lower priority).

			 

	Map : Key- value pairs:
				Where key is unique and value may be duplicate. 
		HashMap 	: Unorder 	
		LinkedHashMap 	: Order 
		TreeMap		: Sorted using key by default asc 
		Hashtable 	: Legacy class and sychrornized. 

		

	Retrieve the elements from collection of classes 

	1. for each loop 
	2. Iterator 		: only forward direction 
	3. ListIterator 	: forward as well as backward direction. 

	
	CollectionFramwork with Generics help to store hetrogenouse elements. 

	CollectionFramewor with Generics help to store same type of values. 

	syntax 

	CollectionClass<Type> objectName = new CollectionClass<Type>();

	Type : It may be Integer, Float, String, or user-defined class objects. 

	

	Java 8 Features 

	Interface : From java 8 onwards interface can contains method with body. But 
	method must with default or static keyword. 
	
	default methods : If interface contains default method with body. The class which 
	implements that interface no mandatory to override that method.If they want to they can 
	override. 

	static method : We can write method with body in interface but method must be static. 
	static method can't override it. This method we have to call through interfaceName.methodName

	
	Inner class : 
		1. non static inner class 
		2. static inner class 		event base programming 
						awt/swing or Android. 
									
		2. Anonymous inner class 
				
	Lambda Expression or sytax 
		
	But using Lambda expression java became functional programming language. 
	
	Within a method or function we can write another functions or methods. 

	Lambda expression is anonymous inner function or methods. 

	If you want use the lambda expression the function must functionalInterface. 

	Fuctional interface : the interface contains only one method is known as functional interface. 
	It must be cotains only one abstract method. Default as well as static more than one no problem.

	
	@FunctionalInterface 
	
	
	 
				





		
		
							
	
	When we display user-defined class reference in println internally it will call 
	toString() which belong to Object class. 
	That methods display the information in the form packageName.className@code 
	If you want meaningful message then we have to override toString() in user-defined class. 

		







		





	
	








































